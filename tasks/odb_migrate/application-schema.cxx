// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <odb/database.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/details/unused.hxx>

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"Instance\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"Build\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"Recipe\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"Machine\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"schema_version\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Machine\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"deleted\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  \"created_at\" BIGINT NULL,\n"
                      "  \"updated_at\" BIGINT NULL,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"ip\" TEXT NOT NULL)");
          db.execute ("CREATE TABLE \"Recipe\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"deleted\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  \"created_at\" BIGINT NULL,\n"
                      "  \"updated_at\" BIGINT NULL,\n"
                      "  \"name\" TEXT NOT NULL)");
          db.execute ("CREATE TABLE \"Build\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"deleted\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  \"created_at\" BIGINT NULL,\n"
                      "  \"updated_at\" BIGINT NULL,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"git\" TEXT NOT NULL,\n"
                      "  \"branch\" TEXT NOT NULL,\n"
                      "  \"options\" TEXT NOT NULL,\n"
                      "  \"recipe_id\" BIGINT NOT NULL)");
          db.execute ("CREATE TABLE \"Instance\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"deleted\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  \"created_at\" BIGINT NULL,\n"
                      "  \"updated_at\" BIGINT NULL,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"path\" TEXT NOT NULL,\n"
                      "  \"user\" TEXT NOT NULL,\n"
                      "  \"machine_id\" BIGINT NOT NULL,\n"
                      "  \"build_id\" BIGINT NOT NULL)");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE \"schema_version\" (\n"
                      "  \"name\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" BIGINT NOT NULL,\n"
                      "  \"migration\" BOOLEAN NOT NULL)");
          db.execute ("INSERT INTO \"schema_version\" (\n"
                      "  \"name\", \"version\", \"migration\")\n"
                      "  VALUES ('', 3, FALSE)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_pgsql,
    "",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_1_ (
    id_pgsql,
    "",
    1ULL,
    0);

  static bool
  migrate_schema_2 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Recipe\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"deleted\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  \"created_at\" BIGINT NULL,\n"
                      "  \"updated_at\" BIGINT NULL,\n"
                      "  \"name\" TEXT NOT NULL)");
          db.execute ("ALTER TABLE \"Build\"\n"
                      "  ADD COLUMN \"recipe\" BIGINT NULL");
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"version\" = 2, \"migration\" = TRUE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE \"Build\"\n"
                      "  ADD CONSTRAINT \"recipe_fk\"\n"
                      "    FOREIGN KEY (\"recipe\")\n"
                      "    REFERENCES \"Recipe\" (\"id\")\n"
                      "    INITIALLY DEFERRED");
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"migration\" = FALSE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_2_ (
    id_pgsql,
    "",
    2ULL,
    &migrate_schema_2);

  static bool
  migrate_schema_3 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("ALTER TABLE \"Build\"\n"
                      "  ADD COLUMN \"recipe_id\" BIGINT NULL,\n"
                      "  DROP CONSTRAINT \"recipe_fk\"");
          db.execute ("ALTER TABLE \"Instance\"\n"
                      "  ADD COLUMN \"machine_id\" BIGINT NULL,\n"
                      "  ADD COLUMN \"build_id\" BIGINT NULL,\n"
                      "  DROP CONSTRAINT \"machine_fk\",\n"
                      "  DROP CONSTRAINT \"build_fk\"");
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"version\" = 3, \"migration\" = TRUE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE \"Instance\"\n"
                      "  ALTER COLUMN \"machine_id\" SET NOT NULL,\n"
                      "  ALTER COLUMN \"build_id\" SET NOT NULL,\n"
                      "  DROP COLUMN \"machine\",\n"
                      "  DROP COLUMN \"build\"");
          db.execute ("ALTER TABLE \"Build\"\n"
                      "  ALTER COLUMN \"recipe_id\" SET NOT NULL,\n"
                      "  DROP COLUMN \"recipe\"");
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"migration\" = FALSE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_3_ (
    id_pgsql,
    "",
    3ULL,
    &migrate_schema_3);
}

#include <odb/post.hxx>
